About
~~~~~
This repo a personal side branch of QEMU with the goal of developing RISC-V
target support in a way that would allow merging it into the mainline project.
See http://qemu.org and git://git.qemu.org/qemu.git

This repo is not directly related to the official RISC-V qemu project
found at https://github.com/riscv/riscv-qemu
Major changes include:

  * incremental code build-up allowing for small reviewable commits
  * linux-user mode (but no system mode atm)
  * shorter and simplier TCG frontend
  * more efficient TCG code for some ops, less helpers
  * support for RV32 and compresses opcodes

The project started as an attempt to add linux-user mode to the official
riscv-qemu, but ended up with a clean-sheet rewrite of the whole translation
module and most of the supporting structure as well. A lot of code is based
on openrisc, sh4 and microblaze ports; the original port was apparently
based on target-mips.

The visible "devel" branch is not what is going to be the final set of patches.


Coverage and status
~~~~~~~~~~~~~~~~~~~
User mode RV64/RV32 emulation builds and run executables.
System mode emulation is not supported yet.

Extensions A, M, F, D and C are implemented for RV64 and RV32.
Most CSRs are not properly supported, including mandatory counters.
This implementation follows RISC-V ISA spec version 2.1.

GDB remote debugging works.

Current plans: minimalistic system mode.


Building
~~~~~~~~
Follow standard qemu procedure for riscv64-linux-user target:

    ./configure --target-list=riscv64-linux-user [--python=/usr/bin/python2]
    make

Note configure needs explicit python2 command supplied in case the host
python is python 3.x, which is pretty common in modern distros.

Target name for RV32 is riscv32-linux-user.


Debugging
~~~~~~~~~
ISA test suite can be found at https://github.com/arsv/riscv-qemu-tests

Use GDB from the official RISC-V toolchain in extended-remote mode:

    qemu-riscv -g 1234 ./executable

    riscv64-unknown-elf-gdb -ex "target extended-remote :1234" ./executable

Instruction single-stepping, line stepping and breakpoints should work.
GDB should display xN and fN registers properly as well.


Where's the code
~~~~~~~~~~~~~~~~
Check target-riscv/, linux-user/riscv/, and search for TARGET_RISCV ifdefs
in linux-user{main.c,elfload.c,signal.c,syscall_defs.h}.


License and contacts
~~~~~~~~~~~~~~~~~~~~
RISC-V related code in this branch is licensed under the terms
of GNU General Public License version 2, like most of QEMU.

Alex Suykov <alex.suykov@gmail.com>
