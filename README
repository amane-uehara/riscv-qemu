About
~~~~~
This repo a personal side branch of QEMU with the goal of developing RISC-V
target support in a way that would allow merging it into the mainline project.
See http://qemu.org and git://git.qemu.org/qemu.git

This repo is not directly related to the official RISC-V qemu project
found at https://github.com/riscv/riscv-qemu
Major changes include:

  * small reviewable commits (but see below)
  * linux-user mode (but no system mode atm)
  * common qemu softfloat for FP ops
  * shorter and simplier TCG frontend
  * different TCG code for some ops

The project started as an attempt to add linux-user mode to the official
riscv-qemu, but ended up with a clean-sheet rewrite of the whole translation
module and most of the supporting structure as well. As such, it probably
takes more from openrisc, sh4, moxie and microblaze ports than it does from
the original riscv port.

The visible "devel" branch is not what is going to be upstreamed.
It's a development branch with lots of backtracking, bug fixing, and bugs.
The patches are going to be re-arranged for submission.


Coverage and status
~~~~~~~~~~~~~~~~~~~
RV64 user mode emulation (qemu-riscv) builds and runs some executables.
System mode emulation is not supported yet.

Extensions M (mul/div) works. Extensions F and D are buggy.
Extensions A and C (AMO, compresses instructions) are not supported yet.
Most CSRs are not properly supported, including mandatory counters.

RV32 is not supported.
Disabling already-implemented extensions is not possible yet.

GDB remote debugging works.

Current plans: extensions A and C, system mode, RV32, roughly in that order,
possibly with minor tweaks in-between them. Then maybe support for F w/o D,
selective extensions, and/or CPU models.


Building
~~~~~~~~
Follow standard qemu procedure for riscv-linux-user target:

    ./configure --target-list=riscv-linux-user [--python=/usr/bin/python2]
    make

Note configure needs explicit python2 command supplied in case the host
python is python 3.x, which is pretty common in modern distros.

The target is just "riscv" for now.


Debugging
~~~~~~~~~
GDB from the official RISC-V toolchain must be used in extended-remote mode:

    qemu-riscv -g 1234 ./executable

    riscv64-unknown-elf-gdb -ex "target extended-remote :1234" ./executable

Instruction single-stepping, line stepping and breakpoints should work.
GDB should display xN and fN registers properly as well.


License and contacts
~~~~~~~~~~~~~~~~~~~~
RISC-V related code in this branch is licensed under the terms
of GNU General Public License version 2, like most of QEMU.

Alex Suykov <alex.suykov@gmail.com>
